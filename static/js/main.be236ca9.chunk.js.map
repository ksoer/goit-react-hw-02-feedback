{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","shortid","generate","Section","title","children","Notification","message","App","state","countTotalFeedback","countPositiveFeedbackPercentage","result","percentage","Math","round","e","target","setState","prevState","this","objKey","Object","keys","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAsBeA,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC7C,OACI,qCACI,sCAASJ,KACT,yCAAYC,KACZ,qCAAQC,KACR,uCAAUC,KACV,mDAAsBC,EAAtB,Y,gBCUGC,EAhBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAChC,OACI,mCACKD,EAAQE,KAAI,SAACC,GAAD,OACT,wBAAiCC,KAAK,SAASC,KAAMF,EAAQG,QAASL,EAAtE,SACKE,GADQI,IAAQC,kBCQtBC,EAZC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACI,qCACI,6BAAKD,IACJC,MCKEC,EAVM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OACI,mCACI,4BAAIA,OCGKC,E,4MACnBC,MAAQ,CACNrB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPoB,mBAAqB,WACnB,MAA+B,EAAKD,MAEpC,OAFA,EAAQrB,KAAR,EAAcC,QAAd,EAAuBC,K,EAKzBqB,gCAAkC,WAChC,IAAMC,EAAS,EAAKF,qBAEdG,EAAqB,IADV,EAAKJ,MAAdrB,KAC0BwB,EAClC,OAAOE,KAAKC,MAAMF,I,EAGpBlB,gBAAkB,SAACqB,GACjB,IAAMjB,EAAOiB,EAAEC,OAAOlB,KACtB,EAAKmB,UAAS,SAACC,GAAD,sBACXpB,EAAOoB,EAAUpB,GAAQ,O,4CAG9B,WACE,MAA+BqB,KAAKX,MAA5BrB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBC,EAAQ6B,KAAKV,qBACblB,EAAqB4B,KAAKT,kCAE1BU,EAASC,OAAOC,KAAKH,KAAKX,OAChC,OACE,qCACE,cAAC,EAAD,CAASL,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBV,QAAS2B,EAAQ1B,gBAAiByB,KAAKzB,oBAG/C,IAAVJ,EACC,cAAC,EAAD,CAAcgB,QAAQ,sBAEtB,cAAC,EAAD,CAASH,MAAM,aAAf,SACE,cAAC,EAAD,CACEhB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,a,GA/CDgC,aCIlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.be236ca9.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n    return (\r\n        <>\r\n            <p>Good:{good}</p>\r\n            <p>Neutral:{neutral}</p>\r\n            <p>Bad:{bad}</p>\r\n            <p>Total:{total}</p>\r\n            <p>Positive feedback:{positivePercentage} %</p>\r\n        </>\r\n    );\r\n};\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Statistics;","import shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n    return (\r\n        <>\r\n            {options.map((option) => (\r\n                <button key={shortid.generate()} type=\"button\" name={option} onClick={onLeaveFeedback}>\r\n                    {option}\r\n                </button>\r\n            ))}\r\n        </>\r\n    );\r\n};\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.array.isRequired,\r\n    onLeaveFeedback: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FeedbackOptions;","\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => {\r\n    return (\r\n        <>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </>\r\n    );\r\n};\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n};\r\nexport default Section;","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n    return (\r\n        <>\r\n            <p>{message}</p>\r\n        </>\r\n    );\r\n};\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired\r\n};\r\nexport default Notification;","import React, { Component } from 'react';\nimport Statistics from './components/Statistics/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Section from './components/Section/Section';\nimport Notification from './components/Notification/Notification';\n\n\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    const result = good + neutral + bad;\n    return result;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const result = this.countTotalFeedback();\n    const { good } = this.state;\n    const percentage = (good * 100) / result;\n    return Math.round(percentage);\n  };\n\n  onLeaveFeedback = (e) => {\n    const name = e.target.name;\n    this.setState((prevState) => ({\n      [name]: prevState[name] + 1\n    }));\n  };\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n\n    const objKey = Object.keys(this.state);\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions options={objKey} onLeaveFeedback={this.onLeaveFeedback} />\n        </Section>\n\n        {total === 0 ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Section title=\"Statistics\">\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          </Section>\n        )}\n      </>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}